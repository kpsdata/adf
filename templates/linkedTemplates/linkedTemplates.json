{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "hmcts-adf-dev-v2"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DFCuratedToDWHStaging')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ccdParquet",
								"type": "DatasetReference"
							},
							"name": "ccdparquet"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dtAZDWHSTAGING",
								"type": "DatasetReference"
							},
							"name": "DWHStaging"
						}
					],
					"transformations": [],
					"script": "\n\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true) ~> ccdparquet\nccdparquet sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table') ~> DWHStaging"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SlowlyChangingDimensionType1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dtAZDB",
								"type": "DatasetReference"
							},
							"name": "dimExample"
						},
						{
							"dataset": {
								"referenceName": "dtAZDB",
								"type": "DatasetReference"
							},
							"name": "STGdimExample"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "dimTable"
						}
					],
					"transformations": [
						{
							"name": "CreateHashedRecord"
						},
						{
							"name": "CheckIfNewRecord"
						},
						{
							"name": "CheckBusinessKey"
						},
						{
							"name": "AddColumns"
						},
						{
							"name": "AlterRow"
						}
					],
					"script": "\n\nsource(output(\n\t\tpayment_key as integer,\n\t\tpayment_group_reference as string,\n\t\tpayment_reference as string,\n\t\tccd_reference as string,\n\t\thashed_value as string,\n\t\t{_inserted} as timestamp,\n\t\t{_lastModified} as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> dimExample\nsource(output(\n\t\tpayment_key as integer,\n\t\tpayment_group_reference as string,\n\t\tpayment_reference as string,\n\t\tccd_reference as string,\n\t\thashed_value as string,\n\t\t{_inserted} as timestamp,\n\t\t{_lastModified} as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> STGdimExample\nSTGdimExample derive(HashedValue = sha1(payment_group_reference,payment_reference,ccd_reference)) ~> CreateHashedRecord\nCreateHashedRecord, dimExample exists(HashedValue == dimExample@hashed_value,\n\tnegate:true,\n\tbroadcast: 'none')~> CheckIfNewRecord\nCheckIfNewRecord, dimExample lookup(STGdimExample@payment_group_reference == dimExample@payment_group_reference,\n\tbroadcast: 'none')~> CheckBusinessKey\nCheckBusinessKey derive(inserted = iif(isNull(dimExample@{_inserted}),currentTimestamp(),dimExample@{_inserted}),\n\t\tlastModified = iif(isNull(dimExample@{_lastModified}),currentTimestamp(),dimExample@{_lastModified})) ~> AddColumns\nAddColumns alterRow(upsertIf(true())) ~> AlterRow\nAlterRow sink(input(\n\t\tpayment_key as integer,\n\t\tpayment_group_reference as string,\n\t\tpayment_reference as string,\n\t\tccd_reference as string,\n\t\thashed_value as string,\n\t\t{_inserted} as timestamp,\n\t\t{_lastModified} as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tpayment_key = STGdimExample@payment_key,\n\t\tpayment_group_reference = STGdimExample@payment_group_reference,\n\t\tpayment_reference = STGdimExample@payment_reference,\n\t\tccd_reference = STGdimExample@ccd_reference,\n\t\thashed_value = STGdimExample@hashed_value,\n\t\t{_inserted} = inserted,\n\t\t{_lastModified} = lastModified\n\t)) ~> dimTable"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/hmcts-ccd-raw-to-curated-factory')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get File List",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Start Logging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dtLANDINGZONE",
								"type": "DatasetReference"
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Start Logging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[monitor].[sp_PipelineRunLogStart]",
							"storedProcedureParameters": {
								"AdfName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lsAZDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ForEachFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get File List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get File List').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetVariable1",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "vFILENAME",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lkp HiveQL Query",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetVariable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "SELECT [Query] as HiveQL\nFROM [conf].[HiveQueries]\nWHERE [EndDateTime] IS NULL"
										},
										"dataset": {
											"referenceName": "dtAZDB",
											"type": "DatasetReference"
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "Ingest Curated Zone",
									"type": "HDInsightHive",
									"dependsOn": [
										{
											"activity": "Lkp HiveQL Query",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"scriptPath": "scripts/IngestRawCurated.hql",
										"defines": {
											"rawdatabase": {
												"value": "@pipeline().parameters.pHIVERAWDATABASE",
												"type": "Expression"
											},
											"filepath": {
												"value": "@pipeline().parameters.pFILEPATH",
												"type": "Expression"
											},
											"filename": {
												"value": "@variables('vFILENAME')",
												"type": "Expression"
											},
											"ccd": "ccd",
											"curateddatabase": {
												"value": "@pipeline().parameters.pHIVECURATEDATABASE",
												"type": "Expression"
											},
											"sql": {
												"value": "@activity('Lkp HiveQL Query').output.FirstRow.HiveQL",
												"type": "Expression"
											}
										},
										"scriptLinkedService": {
											"referenceName": "lsCLUSTERSTORAGE",
											"type": "LinkedServiceReference"
										}
									},
									"linkedServiceName": {
										"referenceName": "lsCLUSTER",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "DFCuratedToDWHStaging",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Ingest Curated Zone",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DFCuratedToDWHStaging",
											"type": "DataFlowReference"
										}
									}
								}
							]
						}
					},
					{
						"name": "End Logging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ForEachFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[monitor].[sp_PipelineRunLogEnd]",
							"storedProcedureParameters": {
								"PipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lsAZDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"pHIVERAWDATABASE": {
						"type": "string",
						"defaultValue": "edl_raw_zone"
					},
					"pHIVERAWTABLE": {
						"type": "string",
						"defaultValue": "ccd"
					},
					"pFILEPATH": {
						"type": "string",
						"defaultValue": "wasbs://landingzone@hmctsdatalake.blob.core.windows.net"
					},
					"pHIVECURATEDATABASE": {
						"type": "string",
						"defaultValue": "edl_curated_zone"
					},
					"pHIVECURATEDTABLE": {
						"type": "string",
						"defaultValue": "ccd_curated"
					}
				},
				"variables": {
					"vFILENAME": {
						"type": "String",
						"defaultValue": "Unknown"
					},
					"vLASTMODIFIEDDATE": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DFCuratedToDWHStaging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/hmcts-data-warehouse-sdc')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SlowlyChangingDimensionType1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SlowlyChangingDimensionType1",
								"type": "DataFlowReference"
							}
						}
					}
				],
				"variables": {
					"vFILENAME": {
						"type": "String",
						"defaultValue": "Unknown"
					},
					"vLASTMODIFIEDDATE": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SlowlyChangingDimensionType1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/hmcts-data-lake-master-factory')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Start Logging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[monitor].[sp_PipelineRunLogStart]",
							"storedProcedureParameters": {
								"AdfName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lsAZDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "End Logging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Exec ccd raw to curated factory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[monitor].[sp_PipelineRunLogEnd]",
							"storedProcedureParameters": {
								"PipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lsAZDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Exec ccd landing to raw factory",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Start Logging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "hmcts-ccd-landing-to-raw-factory",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "Exec ccd raw to curated factory",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Exec ccd landing to raw factory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "hmcts-ccd-raw-to-curated-factory",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					}
				],
				"variables": {
					"vFILENAME": {
						"type": "String",
						"defaultValue": "Unknown"
					},
					"vLASTMODIFIEDDATE": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/hmcts-ccd-raw-to-curated-factory')]"
			]
		}
	]
}